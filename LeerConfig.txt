MicroServicio realizado con el Patron DDD (Domain Driven Design)

Tecnologias Utilizadas:
-Net 5
-GraphQL
-EntityFramework Core
-Autenticación con jwt
-Sql Server
-Visual Studio 2019
-Linq

urlEndPoint (POST): http://localhost:52134/api/LargeRealEstateCompany

Nota  : Todos los consumos son via GraphQL con el mismo EndPoint
Nota 2: Se puede usar tanto PostMan como Banana Cake Pop para realizar estos consumos y enviar el token como un Header
	-Ejemplo de Header de autenticación:
	{
	  "Authorization":"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6Ik1JQ1JPU0VSVklDRUxSRUNfMzM3MGRjMTQtMzM3OC00MjMxLTliYTEtMmQ0OTZlNzUxYjdmIiwiZXhwIjoxNjIzMjA1NTMyLCJpc3MiOiJNSUNST1NFUlZJQ0VMUkVDIiwiYXVkIjoiTUlDUk9TRVJWSUNFTFJFQyJ9.Bg-XCamwBN48e_vEPPqJuGZluUEF9qVbDzIl7iFwmz4"
	}

Nota 3: Para abrir el proyecto ingresar a la carpeta MicroServiceLREC dar clic derecho sobre el archivo MicroServiceLREC.sln y seleccionar la opción abrir con Visual Studio 2019 

-Para crear la base de datos se debe primero configurar el Connection String el cual se encuentra en el proyecto Infraestructure en el archivo appsettings.json, luego de modificar el Connection String se debe ejecutar el comando 'Update-DataBase -StartupProject Infraestructure -Project Infraestructure', dicho comando se ejecuta desde la consola de administrador de paquetes de Visual Studio 2019; esto ejecutara las migraciones que ya estan creadas y creara la base de datos en el host que se especifico en el Connection String con le nombre de la base de datos que se coloco ahí tambien. 


Generación de Token de acceso
	1.- Consumo de API para generar Token

	{
	  token(appName:"MicroServiceLREC") 
	}

consultas con GraphQL
	1.- Querys
		1.1  OwnerAPI ejemplos:
			1.1.1 Consulta total de propietarios sin paginación

			{
			  ownerAPI
			  {
			    state
			    message
			    error
			    custom
			    {
			      idOwner
			      name
			      address
			      photo
			      birthday
			    }
			  }
			}

			1.1.2 Consulta propietarios por ID

			{
			  ownerAPI(id:1)
			  {
			    state
			    message
			    error
			    custom
			    {
			      idOwner
			      name
			      address
			      photo
			      birthday
			    }
			  }
			}

			1.1.3 Consulta de propietarios con Paginación
			NOTA: el parametro 'page' indica la pagina actual y el parametro 'items' la cantidad de registros por pagina

			{
			  ownerAPI(page:1, items:2)
			  {
			    state
			    message
			    error
			    custom
			    {
			      idOwner
			      name
			      address
			      photo
			      birthday
			    }
			    pagesInfo
			    {
			      itemsPerPage
			      currentPage
			      previusPage
			      nextPage
			      totalPages
			    }
			  }
			}

		1.2  PropertyAPI ejemplos:
			1.2.1 Consulta total de propiedades sin paginación 

			{
			  propertyAPI
			  {
			    state
			    message
			    error
			    custom
			    {
			      idProperty
			      idOwner
			      name
			      address
			      price
			      codeInternal
			      year
			    }
			  }
			}

			1.2.2 Consulta de propiedades por id

			{
			  propertyAPI(id:1)
			  {
			    state
			    message
			    error
			    custom
			    {
			      idProperty
			      idOwner
			      name
			      address
			      price
			      codeInternal
			      year
			    }
			  }
			}

			1.2.3 Consultas de propiedades con Paginación
			NOTA: el parametro 'page' indica la pagina actual y el parametro 'items' la cantidad de registros por pagina

			{
			  propertyAPI(page:1, items:2)
			  {
			    state
			    message
			    error
			    custom
			    {
			      idProperty
			      idOwner
			      name
			      address
			      price
			      codeInternal
			      year
			    }
			    pagesInfo
			    {
			      itemsPerPage
			      currentPage
			      previusPage
			      nextPage
			      totalPages
			    }
			  }
			}

		1.3 de igual forma estan los Query para consultar las tablas PropertyImage (Query: propertyImageAPI) y la tabla PropertyTrace (Query:propertyTraceAPI)

		1.4 OwnerInfo ejemplo: 
			1.4.1 Consultar toda las tablas de la base de datos con sus relaciones partiendo de la tabla Owner

			{
			  ownerInfo
			  {
			    idOwner
			    name
			    address
			    photo
			    birthday
			    propertys
			    {
			      idProperty
			      name
			      address
			      price
			      codeInternal
			      year
			      propertyImages
			      {
			        idPropertyImage
			        file
			        enabled
			      }
			      propertyTraces
			      {
			        idPropertyTrace
			        dateSale
			        name
			        value
			        tax
			      }
			    }
			  }
			}

			1.4.2 Consultar toda las tablas de la base de datos con sus relaciones partiendo de la tabla Owner aplicando filtros de busqueda

			Ejemplo 1 Filtro name:

			{
			  ownerInfo(where:{name:"Pedro Perez"})
			  {
			    idOwner
			    name
			    address
			    photo
			    birthday
			    propertys
			    {
			      idProperty
			      name
			      address
			      price
			      codeInternal
			      year
			      propertyImages
			      {
			        idPropertyImage
			        file
			        enabled
			      }
			      propertyTraces
			      {
			        idPropertyTrace
			        dateSale
			        name
			        value
			        tax
			      }
			    }
			  }
			}

			Ejemplo 2 Filtro idOwner

			{
			  ownerInfo(where:{idOwner:2})
			  {
			    idOwner
			    name
			    address
			    photo
			    birthday
			    propertys
			    {
			      idProperty
			      name
			      address
			      price
			      codeInternal
			      year
			      propertyImages
			      {
			        idPropertyImage
			        file
			        enabled
			      }
			      propertyTraces
			      {
			        idPropertyTrace
			        dateSale
			        name
			        value
			        tax
			      }
			    }
			  }
			}

Nota: Como GraphQL es un protocolo de consulta, desde el consumo del MicroServicio se decide que propiedades quiero que retorne la consula deseada
Un ejemplo de esto es que en la consulta anterior se podria quitar varios de los parametros que se envian para su retorno como por ejemplo quitar el parametro photo o address de la consulta anterior devolveria el mismo resultado solo que sin esas propiedades esto es una de las multiples ventajas de usar GraphQL, en un mismo EndPoint se tienen multiples consultas sin la necesidad de crear varios EndPoint o metodos para ello.   

			  

